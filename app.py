import streamlit as st
import sqlite3
import pandas as pd

# –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_connection(league_db):
    return sqlite3.connect(league_db)

# –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–≤
leagues = {
    "–ê–Ω–≥–ª–∏—è –ß–µ–º–ø–∏–æ–Ω—à–∏–ø": "–∞–Ω–≥–ª–∏—è_—á–µ–º–ø–∏–æ–Ω—à–∏–ø_full_stats.db",
    "–ò—Å–ø–∞–Ω–∏—è –õ–∞ –õ–∏–≥–∞": "–∏—Å–ø–∞–Ω–∏—è_–ª–∞_–ª–∏–≥–∞_full_stats.db",
    "–ò—Å–ø–∞–Ω–∏—è –õ–∞ –õ–∏–≥–∞ 2": "–∏—Å–ø–∞–Ω–∏—è_–ª–∞_–ª–∏–≥–∞_2_full_stats.db",
    "–ò—Ç–∞–ª–∏—è –°–µ—Ä–∏—è A": "–∏—Ç–∞–ª–∏—è_—Å–µ—Ä–∏—è_a_full_stats.db",
    "–ò—Ç–∞–ª–∏—è –°–µ—Ä–∏—è B": "–∏—Ç–∞–ª–∏—è_—Å–µ—Ä–∏—è_b_full_stats.db",
    "–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è –ü—Ä–∏–º–µ–π—Ä–∞": "–ø–æ—Ä—Ç—É–≥–∞–ª–∏—è_–ø—Ä–∏–º–µ–π—Ä–∞_full_stats.db",
    "–†–æ—Å—Å–∏—è –ü—Ä–µ–º—å–µ—Ä-–ª–∏–≥–∞": "—Ä–æ—Å—Å–∏—è_–ø—Ä–µ–º—å–µ—Ä-–ª–∏–≥–∞_full_stats.db",
    "–§—Ä–∞–Ω—Ü–∏—è –õ–∏–≥–∞ 1": "—Ñ—Ä–∞–Ω—Ü–∏—è_–ª–∏–≥–∞_1_full_stats.db",
    "–§—Ä–∞–Ω—Ü–∏—è –õ–∏–≥–∞ 2": "—Ñ—Ä–∞–Ω—Ü–∏—è_–ª–∏–≥–∞_2_full_stats.db",
    "–®–æ—Ç–ª–∞–Ω–¥–∏—è –ü—Ä–µ–º—å–µ—Ä-–ª–∏–≥–∞": "—à–æ—Ç–ª–∞–Ω–¥–∏—è_–ø—Ä–µ–º—å–µ—Ä-–ª–∏–≥–∞_full_stats.db",
    "–í–µ–Ω–≥—Ä–∏—è –í—ã—Å—à–∞—è –ª–∏–≥–∞": "–≤–µ–Ω–≥—Ä–∏—è_–≤—ã—Å—à–∞—è_–ª–∏–≥–∞_full_stats.db",
    "–ì–µ—Ä–º–∞–Ω–∏—è –ë—É–Ω–¥–µ—Å–ª–∏–≥–∞": "–≥–µ—Ä–º–∞–Ω–∏—è_–±—É–Ω–¥–µ—Å–ª–∏–≥–∞_full_stats.db",
    "–ì–µ—Ä–º–∞–Ω–∏—è –ë—É–Ω–¥–µ—Å–ª–∏–≥–∞ 2": "–≥–µ—Ä–º–∞–Ω–∏—è_–±—É–Ω–¥–µ—Å–ª–∏–≥–∞_2_full_stats.db",
    "MLS": "mls_full_stats.db",
    "–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞ –õ–∏–≥–∞ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å": "–∞—Ä–≥–µ–Ω—Ç–∏–Ω–∞_–ª–∏–≥–∞_–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å_full_stats.db",
    "–ë—Ä–∞–∑–∏–ª–∏—è –°–µ—Ä–∏—è –ê": "–±—Ä–∞–∑–∏–ª–∏—è_—Å–µ—Ä–∏—è_a_full_stats.db"
}

# –í—ã–±–æ—Ä —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞
league = st.sidebar.selectbox("üèÜ –í—ã–±–µ—Ä–∏—Ç–µ —á–µ–º–ø–∏–æ–Ω–∞—Ç", list(leagues.keys()))

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = get_connection(leagues[league])

# –ú–µ–Ω—é —Å–ª–µ–≤–∞
menu = st.sidebar.radio("üìã –†–∞–∑–¥–µ–ª—ã", ["–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞", "–ú–∞—Ç—á–∏", "–°–æ–±—ã—Ç–∏—è", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤", "–ê–Ω–∞–ª–∏–∑"])

if menu == "–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞":
    st.title(f"üìä –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ - {league}")
    query = """
    SELECT
        team,
        COUNT(fixture_id) as played,
        SUM(CASE WHEN home_away = 'home' AND goals_for > goals_against OR home_away = 'away' AND goals_for > goals_against THEN 1 ELSE 0 END) as wins,
        SUM(CASE WHEN goals_for = goals_against THEN 1 ELSE 0 END) as draws,
        SUM(CASE WHEN home_away = 'home' AND goals_for < goals_against OR home_away = 'away' AND goals_for < goals_against THEN 1 ELSE 0 END) as losses,
        SUM(goals_for) as goals_for,
        SUM(goals_against) as goals_against,
        SUM(goals_for) - SUM(goals_against) as goal_diff,
        SUM(CASE WHEN goals_for > goals_against THEN 3 WHEN goals_for = goals_against THEN 1 ELSE 0 END) as points
    FROM (
        SELECT fixture_id, home_team as team, home_goals as goals_for, away_goals as goals_against, 'home' as home_away FROM fixtures
        UNION ALL
        SELECT fixture_id, away_team as team, away_goals as goals_for, home_goals as goals_against, 'away' as home_away FROM fixtures
    ) matches
    GROUP BY team
    ORDER BY points DESC, goal_diff DESC
    """
    df_table = pd.read_sql(query, conn)
    st.dataframe(df_table)

elif menu == "–ú–∞—Ç—á–∏":
    st.title("‚öΩÔ∏è –ú–∞—Ç—á–∏")
    query = "SELECT fixture_id, date, venue, home_team, away_team, home_goals, away_goals, status FROM fixtures ORDER BY date DESC"
    df = pd.read_sql(query, conn)
    st.dataframe(df)

elif menu in ["–°–æ–±—ã—Ç–∏—è", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤"]:
    fixture_id = st.text_input("üîé –í–≤–µ–¥–∏—Ç–µ ID –º–∞—Ç—á–∞", "")

    if fixture_id:
        if menu == "–°–æ–±—ã—Ç–∏—è":
            st.title(f"üì¢ –°–æ–±—ã—Ç–∏—è –º–∞—Ç—á–∞ {fixture_id}")
            query = f"SELECT * FROM events WHERE fixture_id={fixture_id}"
            df_events = pd.read_sql(query, conn)
            st.dataframe(df_events)

        elif menu == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥":
            st.title(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥ –º–∞—Ç—á–∞ {fixture_id}")
            query = f"SELECT * FROM team_statistics WHERE fixture_id={fixture_id}"
            df_team_stats = pd.read_sql(query, conn)
            st.dataframe(df_team_stats)

        elif menu == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤":
            st.title(f"üë§ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –º–∞—Ç—á–∞ {fixture_id}")
            query = f"SELECT * FROM player_statistics WHERE fixture_id={fixture_id}"
            df_player_stats = pd.read_sql(query, conn)
            st.dataframe(df_player_stats)

elif menu == "–ê–Ω–∞–ª–∏–∑":
    st.title(f"üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∞–Ω–¥ - {league}")

    teams = pd.read_sql("SELECT DISTINCT home_team AS team FROM fixtures UNION SELECT DISTINCT away_team FROM fixtures", conn)['team'].tolist()

    home_team = st.selectbox("üè† –î–æ–º–∞—à–Ω—è—è –∫–æ–º–∞–Ω–¥–∞", sorted(teams))
    away_team = st.selectbox("üöå –ì–æ—Å—Ç–µ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞", sorted(teams))

    def get_avg_stats(team, n_matches=None, home_away=None):
        matches_df = pd.read_sql(f"SELECT * FROM fixtures WHERE (home_team='{team}' OR away_team='{team}') AND status='Match Finished' ORDER BY date DESC", conn)
        if home_away:
            matches_df = matches_df[matches_df[home_away] == team]
        if n_matches:
            matches_df = matches_df.head(n_matches)
        fixture_ids = matches_df['fixture_id'].tolist()
        if not fixture_ids:
            return pd.DataFrame()
        placeholders = ",".join(map(str, fixture_ids))
        query_stats = f"""
        SELECT statistic, AVG(CAST(value AS FLOAT)) as avg_value
        FROM team_statistics
        WHERE fixture_id IN ({placeholders}) AND team='{team}'
        GROUP BY statistic
        """
        return pd.read_sql(query_stats, conn).set_index('statistic')

    st.header(f"üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ: {home_team} (–î–æ–º–∞) vs {away_team} (–ì–æ—Å—Ç–∏)")
    for label, n in [("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∞—Ç—á–µ–π", 5), ("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∞—Ç—á–µ–π", 10), ("–í–µ—Å—å —á–µ–º–ø–∏–æ–Ω–∞—Ç", None)]:
        st.subheader(label)
        col1, col2 = st.columns(2)
        with col1:
            st.write(f"üè† {home_team}")
            st.dataframe(get_avg_stats(home_team, n, 'home_team'))
        with col2:
            st.write(f"üöå {away_team}")
            st.dataframe(get_avg_stats(away_team, n, 'away_team'))

conn.close()
